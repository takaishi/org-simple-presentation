;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

(global-set-key (kbd "M-n") 'org-presentation-goto-next)
(global-set-key (kbd "M-p") 'org-presentation-goto-prebious)

(defun org-presentation-start ()
  (interactive)
  (let ((cbuf (current-buffer))
	(cwin (selected-window))
	(pos (point))
    (spec '())
	beg end level heading ibuf)
    (goto-char (point-min))
    (setq beg (point))
    (save-excursion
      (org-end-of-subtree t t)
      (if (org-on-heading-p) (backward-char 1))
      (setq end (point)))
      (add-to-invisibility-spec 'spec)
      (overlay-put (make-overlay (point-min) beg) 'invisible 'spec)
      (overlay-put (make-overlay (+ 1 end) (point-max)) 'invisible 'spec)))

(defun org-presentation-stop ()
  (interactive)
  (let ((ol (overlays-in (point-min) (point-max))))
    (mapcar '(lambda (x)
               (if (overlay-get x 'invisible)
                   (delete-overlay x))) ol)))

(defun org-presentation-goto-next ()
  (interactive)
  (let ((cbuf (current-buffer))
	(cwin (selected-window))
	(pos (point))
    (spec '())
	beg end level heading ibuf)
    (org-end-of-subtree t t)
    (setq beg (point))
    (backward-char -1)
    (org-end-of-subtree t t)
    (if (org-on-heading-p) (backward-char 1))
    (setq end (point))
    (org-presentation-stop)
    (overlay-put (make-overlay (point-min) beg) 'invisible 'spec)
    (overlay-put (make-overlay (+ 1 end) (point-max)) 'invisible 'spec)))

(defun org-presentation-goto-prebious ()
  (interactive)
  (let ((cbuf (current-buffer))
	(cwin (selected-window))
	(pos (point))
    (spec '())
	beg end level heading ibuf)
    (if (org-on-heading-p) (backward-char 1))
    (org-back-to-heading t)
    (setq beg (point))
    (save-excursion
      (org-end-of-subtree t t)
      (if (org-on-heading-p) (backward-char 1))
      (setq end (point)))
    (org-presentation-stop)
    (overlay-put (make-overlay (point-min) beg) 'invisible 'spec)
    (overlay-put (make-overlay (+ 1 end) (point-max)) 'invisible 'spec)))
